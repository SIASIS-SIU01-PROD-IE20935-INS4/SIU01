import { useState, useCallback } from "react";
import ModalContainer from "../ModalContainer";
import BotonConIcono from "@/components/buttons/BotonConIcono";
import LapizFirmando from "@/components/icons/LapizFirmando";
import {
  ModoRegistro,
  modoRegistroTextos,
} from "@/interfaces/shared/ModoRegistroPersonal";
import { estaDentroDelColegioIE20935 } from "@/lib/helpers/functions/geolocation/getEstadoDeUbicacion";
import { PuntoGeografico } from "@/interfaces/Geolocalizacion";
import { verificarDisponibilidadGPS } from "@/lib/helpers/functions/geolocation/verificarDisponibilidadGPS";
import { detectarTipoDispositivo } from "@/lib/helpers/functions/geolocation/detectarTipoDispositivo";
import Loader from "@/components/shared/loaders/Loader";
import { ENTORNO } from "@/constants/ENTORNO";
import { Entorno } from "@/interfaces/shared/Entornos";

// ========================================================================================
// CONFIGURACI√ìN POR ENTORNO
// ========================================================================================

// üîß TESTING: Mostrar mensajes de debugging y modo de prueba
const TESTING_EXPLICITO = false; // ‚úÖ Cambiar a true para mostrar mensajes de debugging

// üéØ Configuraci√≥n de validaci√≥n GPS seg√∫n entorno
const REQUERIR_VALIDACION_GPS_SEGUN_ENTORNO: Record<Entorno, boolean> = {
  [Entorno.LOCAL]: false,
  [Entorno.DESARROLLO]: false, // ‚úÖ GPS habilitado (solicitar permisos)
  [Entorno.CERTIFICACION]: true,
  [Entorno.PRODUCCION]: true,
  [Entorno.TEST]: true,
};

// üé≠ Configuraci√≥n de coordenadas mockeadas seg√∫n entorno
const USAR_COORDENADAS_MOCKEADAS_SEGUN_ENTORNO: Record<Entorno, boolean> = {
  [Entorno.LOCAL]: false,
  [Entorno.DESARROLLO]: false,
  [Entorno.CERTIFICACION]: true, // ‚úÖ Reemplazar con coordenadas mockeadas al final
  [Entorno.PRODUCCION]: false,
  [Entorno.TEST]: false,
};

// üì± Configuraci√≥n de restricci√≥n de dispositivos seg√∫n entorno
const SOLO_PERMITIR_CELULARES_SEGUN_ENTORNO: Record<Entorno, boolean> = {
  [Entorno.LOCAL]: false, // Permitir laptops en local (para desarrollo)
  [Entorno.DESARROLLO]: false, // ‚úÖ PERMITIR LAPTOPS en desarrollo para testing
  [Entorno.CERTIFICACION]: true, // Solo celulares en certificaci√≥n
  [Entorno.PRODUCCION]: true, // Solo celulares en producci√≥n
  [Entorno.TEST]: false, // Permitir laptops en test
};

// üöÄ VALORES FINALES CALCULADOS SEG√öN ENTORNO ACTUAL
const REQUERIR_VALIDACION_GPS = REQUERIR_VALIDACION_GPS_SEGUN_ENTORNO[ENTORNO];
const USAR_COORDENADAS_MOCKEADAS =
  USAR_COORDENADAS_MOCKEADAS_SEGUN_ENTORNO[ENTORNO];
const SOLO_PERMITIR_CELULARES_PARA_ASISTENCIA =
  SOLO_PERMITIR_CELULARES_SEGUN_ENTORNO[ENTORNO];

// üéØ COORDENADAS PARA TESTING (VERIFICADAS - DENTRO DEL COLEGIO IE 20935)
export const LATITUD_MOCKEADA = -13.0567; // ‚úÖ CONFIRMADO: Dentro del colegio
export const LONGITUD_MOCKEADA = -76.347049; // ‚úÖ CONFIRMADO: Dentro del colegio

// üîç COORDENADAS ALTERNATIVAS PARA DEBUGGING
const COORDENADAS_DEBUGGING = {
  DENTRO_COLEGIO_1: { lat: -13.0567, lng: -76.347049 },
  DENTRO_COLEGIO_2: { lat: -13.056641, lng: -76.346922 },
  FUERA_COLEGIO: { lat: -12.0464, lng: -77.0428 }, // Lima, definitivamente fuera
};

/*
üìã CONFIGURACI√ìN ACTUAL POR ENTORNO:

üîß LOCAL (L):
   - REQUERIR_VALIDACION_GPS = true
   - USAR_COORDENADAS_MOCKEADAS = false
   - SOLO_PERMITIR_CELULARES = false
   ‚Üí GPS real con validaci√≥n completa, laptops permitidas

üõ†Ô∏è DESARROLLO (D):
   - REQUERIR_VALIDACION_GPS = true
   - USAR_COORDENADAS_MOCKEADAS = true ‚Üê GPS FAKE
   - SOLO_PERMITIR_CELULARES = false ‚Üê LAPTOPS PERMITIDAS
   ‚Üí GPS fake (coordenadas mockeadas) con validaci√≥n completa

üß™ CERTIFICACI√ìN (C):
   - REQUERIR_VALIDACION_GPS = true
   - USAR_COORDENADAS_MOCKEADAS = true
   - SOLO_PERMITIR_CELULARES = true
   ‚Üí GPS fake (coordenadas mockeadas) con validaci√≥n completa

üöÄ PRODUCCI√ìN (P):
   - REQUERIR_VALIDACION_GPS = true
   - USAR_COORDENADAS_MOCKEADAS = false
   - SOLO_PERMITIR_CELULARES = true
   ‚Üí GPS real con validaci√≥n completa

üî¨ TEST (T):
   - REQUERIR_VALIDACION_GPS = true
   - USAR_COORDENADAS_MOCKEADAS = false
   - SOLO_PERMITIR_CELULARES = false
   ‚Üí GPS real con validaci√≥n completa, laptops permitidas
*/

interface MarcarAsistenciaPropiaDePersonalModalProps {
  eliminateModal: () => void;
  modoRegistro: ModoRegistro;
  marcarMiAsistenciaDeHoy: () => Promise<void>;
  setMostrarModalConfirmacioAsistenciaMarcada: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalFaltaActivarGPSoBrindarPermisosGPS: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalUbicacionFueraDelColegioAlRegistrarAsistenciaPropia: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalErrorGenericoAlRegistrarAsistenciaPropia: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalFalloConexionAInternet: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalNoSePuedeUsarLaptop: React.Dispatch<
    React.SetStateAction<boolean>
  >;
  setMostrarModalDispositivoSinGPS: React.Dispatch<
    React.SetStateAction<boolean>
  >;
}

const MarcarAsistenciaPropiaDePersonalModal = ({
  eliminateModal,
  modoRegistro,
  marcarMiAsistenciaDeHoy,
  setMostrarModalConfirmacioAsistenciaMarcada,
  setMostrarModalFaltaActivarGPSoBrindarPermisosGPS,
  setMostrarModalUbicacionFueraDelColegioAlRegistrarAsistenciaPropia,
  setMostrarModalErrorGenericoAlRegistrarAsistenciaPropia,
  setMostrarModalFalloConexionAInternet,
  setMostrarModalNoSePuedeUsarLaptop,
  setMostrarModalDispositivoSinGPS,
}: MarcarAsistenciaPropiaDePersonalModalProps) => {
  const [estaProcessando, setEstaProcessando] = useState(false);

  const verificarYSolicitarPermisos = async (): Promise<boolean> => {
    try {
      // Verificar si ya tenemos permisos
      if ("permissions" in navigator) {
        const permission = await navigator.permissions.query({
          name: "geolocation",
        });

        console.log("üìç Estado actual de permisos:", permission.state);

        if (permission.state === "granted") {
          console.log("‚úÖ Permisos ya concedidos");
          return true;
        }

        if (permission.state === "denied") {
          console.log("‚ùå Permisos denegados permanentemente");
          return false;
        }

        console.log("üîÑ Permisos en estado prompt, solicitando...");
      }

      // Solicitar permisos
      return new Promise((resolve) => {
        navigator.geolocation.getCurrentPosition(
          () => {
            console.log("‚úÖ Permisos concedidos");
            resolve(true);
          },
          (error) => {
            console.log("‚ùå Permisos denegados:", error);
            resolve(false);
          },
          {
            enableHighAccuracy: false,
            timeout: 5000,
            maximumAge: Infinity,
          }
        );
      });
    } catch (error) {
      console.error("‚ùå Error al verificar permisos:", error);
      return false;
    }
  };

  const obtenerUbicacion = (): Promise<PuntoGeografico> => {
    return new Promise((resolve, reject) => {
      // üîÑ MODO NORMAL - GPS REAL (pero con posible reemplazo al final)
      if (!navigator.geolocation) {
        reject(new Error("Geolocalizaci√≥n no soportada"));
        return;
      }

      const options = {
        enableHighAccuracy: true,
        timeout: 15000,
        maximumAge: 30000,
      };

      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log("üìç Posici√≥n REAL obtenida:", {
            latitudReal: position.coords.latitude,
            longitudReal: position.coords.longitude,
            precision: position.coords.accuracy,
            entorno: ENTORNO,
          });

          // üé≠ VERIFICAR SI DEBE REEMPLAZAR CON COORDENADAS MOCKEADAS
          if (USAR_COORDENADAS_MOCKEADAS) {
            console.log("üîÑ REEMPLAZANDO coordenadas reales con mockeadas");

            const puntoMockeado = {
              latitud: LATITUD_MOCKEADA,
              longitud: LONGITUD_MOCKEADA,
            };

            console.log("üé≠ Coordenadas finales (MOCKEADAS):", puntoMockeado);

            if (TESTING_EXPLICITO) {
              console.log("üéØ MODO H√çBRIDO:", {
                coordenadasRealesObtenidas: {
                  lat: position.coords.latitude,
                  lng: position.coords.longitude,
                },
                coordenadasQueSeUsaran: puntoMockeado,
                entorno: ENTORNO,
                mensaje: "GPS solicitado ‚úÖ pero coordenadas reemplazadas ‚úÖ",
              });
            }

            // ‚úÖ PRE-VERIFICACI√ìN DE COORDENADAS MOCKEADAS
            const estaDentroMockeado =
              estaDentroDelColegioIE20935(puntoMockeado);
            console.log("üîç PRE-VERIFICACI√ìN coordenadas mockeadas:", {
              coordenadas: puntoMockeado,
              estaDentroDelColegio: estaDentroMockeado,
            });

            if (!estaDentroMockeado) {
              console.error(
                "üö® ERROR: Las coordenadas mockeadas NO est√°n dentro del colegio!"
              );
            }

            resolve(puntoMockeado);
          } else {
            // ‚úÖ USAR COORDENADAS REALES
            console.log("‚úÖ Usando coordenadas REALES obtenidas");
            resolve({
              latitud: position.coords.latitude,
              longitud: position.coords.longitude,
            });
          }
        },
        (error) => {
          console.error("‚ùå Error de geolocalizaci√≥n:", {
            code: error.code,
            message: error.message,
          });

          let errorMessage = "Error desconocido";
          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = "Permisos de ubicaci√≥n denegados";
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = "Ubicaci√≥n no disponible";
              break;
            case error.TIMEOUT:
              errorMessage = "Timeout al obtener ubicaci√≥n";
              break;
          }

          reject(new Error(errorMessage));
        },
        options
      );
    });
  };

  const manejarRegistroAsistencia = useCallback(async () => {
    if (estaProcessando) return;

    try {
      setEstaProcessando(true);

      // MOSTRAR CONFIGURACI√ìN ACTUAL EN CONSOLA
      console.log("üîß CONFIGURACI√ìN ACTUAL:", {
        entorno: `${ENTORNO} (${
          Object.keys(Entorno)[Object.values(Entorno).indexOf(ENTORNO)]
        })`,
        requiereValidacionGPS: REQUERIR_VALIDACION_GPS,
        usaCoordenadasMockeadas: USAR_COORDENADAS_MOCKEADAS,
        soloPermitirCelulares: SOLO_PERMITIR_CELULARES_PARA_ASISTENCIA,
        testingExplicito: TESTING_EXPLICITO,
        configuracionCompleta: {
          validacionGPS: REQUERIR_VALIDACION_GPS_SEGUN_ENTORNO,
          coordenadasMock: USAR_COORDENADAS_MOCKEADAS_SEGUN_ENTORNO,
          celularesOnly: SOLO_PERMITIR_CELULARES_SEGUN_ENTORNO,
        },
      });

      // PASO 1: Verificar tipo de dispositivo
      if (SOLO_PERMITIR_CELULARES_PARA_ASISTENCIA) {
        const tipoDispositivo = detectarTipoDispositivo();

        if (tipoDispositivo === "laptop") {
          console.log("‚ùå Dispositivo no permitido: laptop");
          eliminateModal();
          setMostrarModalNoSePuedeUsarLaptop(true);
          return;
        }

        console.log("‚úÖ Dispositivo permitido: m√≥vil");
      } else {
        console.log(
          "‚úÖ Restricci√≥n de dispositivos deshabilitada - Permitiendo laptops"
        );
      }

      // PASO 2: Verificar si debe validar GPS
      if (!REQUERIR_VALIDACION_GPS) {
        console.log("‚ö° VALIDACI√ìN GPS DESHABILITADA");
        console.log("üöÄ Saltando TODA la validaci√≥n de ubicaci√≥n...");

        // Ir directamente a marcar asistencia
        await marcarMiAsistenciaDeHoy();

        console.log("‚úÖ Asistencia registrada exitosamente (sin GPS)");
        eliminateModal();
        setMostrarModalConfirmacioAsistenciaMarcada(true);
        return;
      }

      // üîç VALIDACI√ìN GPS COMPLETA
      console.log(
        "üîç Validaci√≥n GPS habilitada, procediendo con verificaciones..."
      );

      // PASO 3: Verificar disponibilidad de GPS (Solo si no usamos coordenadas fake)
      if (!USAR_COORDENADAS_MOCKEADAS) {
        if (!verificarDisponibilidadGPS()) {
          console.log("‚ùå GPS no disponible en el dispositivo");
          eliminateModal();
          setMostrarModalDispositivoSinGPS(true);
          return;
        }

        console.log("‚úÖ GPS disponible, verificando permisos...");

        // PASO 4: Verificar y solicitar permisos de geolocalizaci√≥n
        const tienePermisos = await verificarYSolicitarPermisos();

        if (!tienePermisos) {
          console.log("‚ùå No se pudieron obtener permisos de geolocalizaci√≥n");
          eliminateModal();
          setMostrarModalFaltaActivarGPSoBrindarPermisosGPS(true);
          return;
        }

        console.log("‚úÖ Permisos GPS obtenidos");
      } else {
        console.log(
          "‚è≠Ô∏è Saltando verificaci√≥n de GPS - Usando coordenadas mockeadas"
        );
      }

      // PASO 5: Obtener ubicaci√≥n
      let ubicacion: PuntoGeografico;
      try {
        console.log("üìç Obteniendo ubicaci√≥n...");
        ubicacion = await obtenerUbicacion();

        if (USAR_COORDENADAS_MOCKEADAS) {
          if (TESTING_EXPLICITO) {
            console.log(
              `üé≠ Ubicaci√≥n MOCKEADA obtenida (Entorno: ${ENTORNO}):`,
              ubicacion
            );
          } else {
            console.log("‚úÖ Ubicaci√≥n obtenida:", ubicacion);
          }
        } else {
          console.log("‚úÖ Ubicaci√≥n REAL obtenida:", ubicacion);
        }
      } catch (error) {
        console.error("‚ùå Error al obtener ubicaci√≥n:", error);
        eliminateModal();
        setMostrarModalFaltaActivarGPSoBrindarPermisosGPS(true);
        return;
      }

      // PASO 6: Verificar si est√° dentro del colegio
      console.log("üè´ Verificando si est√° dentro del colegio...");
      console.log("üìä DATOS PARA VERIFICACI√ìN:", {
        ubicacionObtenida: ubicacion,
        funcionAUsar: "estaDentroDelColegioIE20935",
        coordenadasMockeadas: USAR_COORDENADAS_MOCKEADAS,
      });

      const estaDentroDelColegio = estaDentroDelColegioIE20935(ubicacion);

      console.log("üéØ RESULTADO VERIFICACI√ìN:", {
        estaDentroDelColegio,
        ubicacion,
        usandoMockeo: USAR_COORDENADAS_MOCKEADAS,
      });

      if (!estaDentroDelColegio) {
        if (USAR_COORDENADAS_MOCKEADAS) {
          console.error(
            "üö® ERROR CR√çTICO: Coordenadas MOCKEADAS est√°n fuera del √°rea del colegio!"
          );
          console.log("üîç DEBUGGING COMPLETO:", {
            coordenadasUsadas: ubicacion,
            coordenadasConfiguradas: {
              LATITUD_MOCKEADA,
              LONGITUD_MOCKEADA,
            },
            coordenadasAlternativas: COORDENADAS_DEBUGGING,
            sugerencia:
              "Verificar la funci√≥n estaDentroDelColegioIE20935 o cambiar coordenadas",
          });

          if (TESTING_EXPLICITO) {
            console.log(
              "üí° TIP: Cambia LATITUD_MOCKEADA y LONGITUD_MOCKEADA para testing"
            );
            console.log(
              "üîß O cambia TESTING_EXPLICITO a false para ocultar estos mensajes"
            );
          }
        } else {
          console.log("‚ùå Usuario fuera del √°rea del colegio");
        }
        eliminateModal();
        setMostrarModalUbicacionFueraDelColegioAlRegistrarAsistenciaPropia(
          true
        );
        return;
      }

      if (USAR_COORDENADAS_MOCKEADAS) {
        if (TESTING_EXPLICITO) {
          console.log(
            "‚úÖ Coordenadas MOCKEADAS est√°n dentro del √°rea, marcando asistencia..."
          );
        } else {
          console.log("‚úÖ Ubicaci√≥n verificada, marcando asistencia...");
        }
      } else {
        console.log(
          "‚úÖ Usuario dentro del √°rea del colegio, marcando asistencia..."
        );
      }

      // PASO FINAL: Marcar asistencia
      await marcarMiAsistenciaDeHoy();

      console.log("‚úÖ Asistencia registrada exitosamente");
      eliminateModal();
      setMostrarModalConfirmacioAsistenciaMarcada(true);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      console.error("‚ùå Error al marcar asistencia:", error);

      // Verificar si es error de conexi√≥n
      if (
        error?.message?.includes("network") ||
        error?.message?.includes("conexi√≥n") ||
        error?.message?.includes("internet") ||
        error?.name === "NetworkError" ||
        error?.message?.includes("fetch")
      ) {
        eliminateModal();
        setMostrarModalFalloConexionAInternet(true);
      } else {
        eliminateModal();
        setMostrarModalErrorGenericoAlRegistrarAsistenciaPropia(true);
      }
    } finally {
      setEstaProcessando(false);
    }
  }, [
    estaProcessando,
    eliminateModal,
    marcarMiAsistenciaDeHoy,
    setMostrarModalConfirmacioAsistenciaMarcada,
    setMostrarModalFaltaActivarGPSoBrindarPermisosGPS,
    setMostrarModalUbicacionFueraDelColegioAlRegistrarAsistenciaPropia,
    setMostrarModalErrorGenericoAlRegistrarAsistenciaPropia,
    setMostrarModalFalloConexionAInternet,
    setMostrarModalNoSePuedeUsarLaptop,
    setMostrarModalDispositivoSinGPS,
  ]);

  // üé® DETERMINAR TEXTO Y ESTILO SEG√öN CONFIGURACI√ìN
  const obtenerTextoModal = () => {
    if (estaProcessando) {
      if (!REQUERIR_VALIDACION_GPS) {
        return {
          texto: (
            <>
              <b>Registrando</b> tu asistencia...
              <br />
              <br />
              {TESTING_EXPLICITO && (
                <span className="text-orange-600">
                  <b>üöÄ Modo sin GPS</b> (Entorno: {ENTORNO})
                </span>
              )}
            </>
          ),
          boton: "Registrando...",
        };
      } else if (USAR_COORDENADAS_MOCKEADAS) {
        return {
          texto: (
            <>
              <b>Verificando permisos</b> y <br />
              obteniendo tu <b>ubicaci√≥n</b>...
              <br />
              <br />
              {TESTING_EXPLICITO && (
                <>
                  <span className="text-purple-600">
                    <b>üé≠ Modo MOCKEO</b> (Entorno: {ENTORNO})
                  </span>
                  <br />
                </>
              )}
              Si aparece una solicitud de <br />
              permisos, por favor <b>acepta</b> <br />
              para continuar.
            </>
          ),
          boton: "Verificando ubicaci√≥n...",
        };
      } else {
        return {
          texto: (
            <>
              <b>Verificando permisos</b> y <br />
              obteniendo tu <b>ubicaci√≥n</b>...
              <br />
              <br />
              Si aparece una solicitud de <br />
              permisos, por favor <b>acepta</b> <br />
              para continuar.
            </>
          ),
          boton: "Verificando ubicaci√≥n...",
        };
      }
    } else {
      if (!REQUERIR_VALIDACION_GPS) {
        return {
          texto: (
            <>
              Vamos a <b>registrar</b> tu <br />
              asistencia directamente.
              <br />
              <br />
              {TESTING_EXPLICITO && (
                <span className="text-orange-600">
                  <b>üöÄ Sin validaci√≥n GPS</b> (Entorno: {ENTORNO})
                </span>
              )}
            </>
          ),
          boton: "üöÄ Registrar (Sin GPS)",
        };
      } else if (USAR_COORDENADAS_MOCKEADAS) {
        return {
          texto: (
            <>
              Vamos a verificar tu <br />
              <b>ubicaci√≥n</b> para{" "}
              <b>
                registrar tu <br />
                asistencia de {modoRegistroTextos[modoRegistro]}
              </b>
              . Aseg√∫rate de <br />
              estar <b>dentro del colegio</b>.
              {TESTING_EXPLICITO && (
                <>
                  <br />
                  <br />
                  <span className="text-purple-600">
                    <b>üé≠ Modo TESTING</b> (Entorno: {ENTORNO})
                  </span>
                </>
              )}
            </>
          ),
          boton: TESTING_EXPLICITO
            ? `üé≠ Registrar (Modo Testing)`
            : `Registrar ${modoRegistroTextos[modoRegistro]}`,
        };
      } else {
        return {
          texto: (
            <>
              Vamos a verificar tu <br />
              <b>ubicaci√≥n</b> para{" "}
              <b>
                registrar tu <br />
                asistencia de {modoRegistroTextos[modoRegistro]}
              </b>
              . Aseg√∫rate de <br />
              estar <b>dentro del colegio</b>.
            </>
          ),
          boton: `Registrar ${modoRegistroTextos[modoRegistro]}`,
        };
      }
    }
  };

  const { texto, boton } = obtenerTextoModal();

  return (
    <ModalContainer className="z-[1200]" eliminateModal={eliminateModal}>
      <div className="w-full max-w-md px-4 py-4 sm:px-6 sm:py-8 flex flex-col items-center justify-center gap-5">
        <p className="text-center text-sm xs:text-base sm:text-lg leading-relaxed">
          {texto}
        </p>

        {REQUERIR_VALIDACION_GPS && (
          <img
            className="rounded-[5px] w-[11rem] xs:w-[11rem] sm:w-[11.5rem] md:w-[10.5rem] h-auto object-contain"
            src="/images/gif/UbicacionColegioViajeGuiado.gif"
            alt="Como llegar al colegio"
          />
        )}

        <BotonConIcono
          className={`${
            modoRegistro === ModoRegistro.Entrada
              ? "bg-verde-principal"
              : "bg-rojo-oscuro"
          } text-blanco flex gap-3 px-4 py-2 rounded-md text-sm sm:text-base disabled:opacity-50 disabled:cursor-not-allowed`}
          texto={boton}
          IconTSX={
            estaProcessando ? (
              <Loader className="w-[1.5rem] bg-white p-[0.3rem]" />
            ) : (
              <LapizFirmando className="w-[1.5rem]" />
            )
          }
          onClick={manejarRegistroAsistencia}
          disabled={estaProcessando}
        />
      </div>
    </ModalContainer>
  );
};

export default MarcarAsistenciaPropiaDePersonalModal;
