import { LogoutTypes } from "@/interfaces/LogoutTypes";
import { logout } from "@/lib/utils/frontend/auth/logout";

// üè∑Ô∏è Enum para los tipos de identificadores
export enum TiposIdentificadores {
  DNI = 1,
  CARNET_EXTRANJERIA = 2,
  CODIGO_ESCUELA = 3,
}

// üìù Mapeo de tipos a textos descriptivos
export const TiposIdentificadoresTextos: Record<TiposIdentificadores, string> =
  {
    [TiposIdentificadores.DNI]: "DNI",
    [TiposIdentificadores.CARNET_EXTRANJERIA]: "Carnet de Extranjer√≠a",
    [TiposIdentificadores.CODIGO_ESCUELA]: "C√≥digo de Escuela",
  };

/**
 * üîç Funci√≥n para extraer el tipo de identificador bas√°ndose en lo que viene despu√©s del gui√≥n
 * Si el tipo no existe o es inv√°lido, cierra la sesi√≥n autom√°ticamente
 *
 * @param identificador - Identificador en formato {identificador}-{tipo}
 * @returns TiposIdentificadores - El tipo de identificador v√°lido
 *
 * @example
 * // Ejemplos de uso:
 * extraerTipoDeIdentificador("12345678-1")    // ‚Üí TiposIdentificadores.DNI (1)
 * extraerTipoDeIdentificador("A123456-2")     // ‚Üí TiposIdentificadores.CARNET_EXTRANJERIA (2)
 * extraerTipoDeIdentificador("ESC123-3")      // ‚Üí TiposIdentificadores.CODIGO_ESCUELA (3)
 * extraerTipoDeIdentificador("12345678-5")    // ‚Üí Cierra sesi√≥n (tipo inv√°lido)
 * extraerTipoDeIdentificador("12345678")      // ‚Üí TiposIdentificadores.DNI (compatibilidad)
 */
export function extraerTipoDeIdentificador(
  identificador: string
): TiposIdentificadores {
  // üßπ Limpiar el identificador de espacios en blanco
  const identificadorLimpio = identificador.trim();

  // üîç Caso 1: DNI de 8 d√≠gitos sin gui√≥n (compatibilidad hacia atr√°s)
  if (/^\d{8}$/.test(identificadorLimpio)) {
    return TiposIdentificadores.DNI;
  }

  // üîç Caso 2: Formato con gui√≥n {identificador}-{tipo}
  const partesIdentificador = identificadorLimpio.split("-");

  // ‚ùå Si no tiene gui√≥n o tiene formato incorrecto, asumir DNI por compatibilidad
  if (partesIdentificador.length !== 2) {
    return TiposIdentificadores.DNI;
  }

  // üìä Extraer el tipo num√©rico de la parte despu√©s del gui√≥n
  const tipoNumerico = parseInt(partesIdentificador[1], 10);

  // ‚úÖ Verificar que el tipo extra√≠do existe en el enum
  const tiposValidos = Object.values(TiposIdentificadores) as number[];

  if (tiposValidos.includes(tipoNumerico)) {
    return tipoNumerico as TiposIdentificadores;
  }

  // üö® TIPO INV√ÅLIDO: Cerrar sesi√≥n por seguridad
  console.error(
    `Tipo de identificador inv√°lido encontrado: ${tipoNumerico} en identificador: ${identificador}`
  );

  // üö™ Cerrar sesi√≥n con detalles del error
  logout(LogoutTypes.ERROR_DATOS_CORRUPTOS, {
    codigo: "INVALID_IDENTIFIER_TYPE",
    origen: "extraerTipoDeIdentificador",
    mensaje: `Tipo de identificador inv√°lido: ${tipoNumerico}`,
    timestamp: Date.now(),
    contexto: `Identificador recibido: ${identificador}`,
  });

  // Este punto nunca se alcanzar√° porque logout redirige, pero TypeScript lo requiere
  throw new Error("Sesi√≥n cerrada por tipo de identificador inv√°lido");
}
