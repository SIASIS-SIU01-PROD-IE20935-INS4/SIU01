import { ENTORNO } from "@/constants/ENTORNO";
import { NOMBRE_INSTITUCION } from "@/constants/NOMBRE_INSITITUCION";
import { NOMBRE_ACTUAL_SISTEMA } from "@/constants/NOMBRE_SISTEMA";
import { Entorno } from "@/interfaces/shared/Entornos";
import { EstudianteConAulaYRelacion } from "@/interfaces/shared/Estudiantes";
import { NivelEducativo } from "@/interfaces/shared/NivelEducativo";
import { TiposIdentificadores } from "@/interfaces/shared/TiposIdentificadores";
import CryptoJS from "crypto-js";

// üîß Constantes de configuraci√≥n
const VALIDAR_NOMBRE_SISTEMA = false;
const VALIDAR_INSTITUCION = true;
const VALIDAR_A√ëO = true;
const VALIDAR_TIPO_IDENTIFICADOR = true;

const MOSTRAR_LOGS = ENTORNO !== Entorno.PRODUCCION;

// üìù Funci√≥n auxiliar para logs condicionales
function log(...args: any[]): void {
  if (MOSTRAR_LOGS) {
    console.log(...args);
  }
}

function logError(...args: any[]): void {
  if (MOSTRAR_LOGS) {
    console.error(...args);
  }
}

function logWarn(...args: any[]): void {
  if (MOSTRAR_LOGS) {
    console.warn(...args);
  }
}

// üéØ Funci√≥n para crear hash de verificaci√≥n
function crearHashCompacto(datos: string): string {
  const secreto =
    process.env.NEXT_PUBLIC_ENCRIPTACION_CADENAS_DE_DATOS_PARA_QR_KEY;
  if (!secreto) {
    throw new Error(
      "Variable de entorno NEXT_PUBLIC_ENCRIPTACION_CADENAS_DE_DATOS_PARA_QR_KEY no encontrada"
    );
  }
  return CryptoJS.SHA256(datos + secreto)
    .toString()
    .substring(0, 8);
}

// üîç Funci√≥n para verificar hash
function verificarHash(datos: string, hashEsperado: string): boolean {
  try {
    return crearHashCompacto(datos) === hashEsperado;
  } catch {
    return false;
  }
}

// üóúÔ∏è Funci√≥n para comprimir datos
function comprimirDatos(
  sistema: string,
  institucion: string,
  nivel: string,
  grado: number,
  identificador: string,
  tipoIdentificador: number,
  a√±o: number
): string {
  const sistemaCode = sistema === NOMBRE_ACTUAL_SISTEMA ? "A" : "X";
  const institucionCode = institucion === NOMBRE_INSTITUCION ? "I" : "X";
  const nivelCode =
    nivel === "PRIMARIA" || nivel === "P"
      ? "P"
      : nivel === "SECUNDARIA" || nivel === "S"
      ? "S"
      : "X";
  const a√±oCode = (a√±o % 100).toString().padStart(2, "0");

  return `${sistemaCode}${institucionCode}${nivelCode}${grado}${tipoIdentificador}${a√±oCode}${identificador}`;
}

// üîÑ Funci√≥n para descomprimir datos
function descomprimirDatos(datosComprimidos: string): {
  sistema: string;
  institucion: string;
  nivel: NivelEducativo;
  grado: number;
  identificador: string;
  tipoIdentificador: number;
  a√±o: number;
} | null {
  try {
    if (datosComprimidos.length < 7) return null;

    const sistemaCode = datosComprimidos[0];
    const institucionCode = datosComprimidos[1];
    const nivelCode = datosComprimidos[2];
    const gradoStr = datosComprimidos[3];
    const tipoIdentificadorStr = datosComprimidos[4];
    const a√±oStr = datosComprimidos.substring(5, 7);
    const identificador = datosComprimidos.substring(7);

    const sistema = sistemaCode === "A" ? NOMBRE_ACTUAL_SISTEMA : "DESCONOCIDO";
    const institucion =
      institucionCode === "I" ? NOMBRE_INSTITUCION : "DESCONOCIDA";

    let nivel: string;
    if (nivelCode === "P") {
      nivel = "P";
    } else if (nivelCode === "S") {
      nivel = "S";
    } else {
      logError(`‚ùå Nivel inv√°lido: '${nivelCode}'`);
      return null;
    }

    const grado = parseInt(gradoStr);
    if (isNaN(grado) || grado < 1 || grado > 6) {
      logError(`‚ùå Grado inv√°lido: '${gradoStr}'`);
      return null;
    }

    const tipoIdentificador = parseInt(tipoIdentificadorStr);
    if (
      isNaN(tipoIdentificador) ||
      tipoIdentificador < 1 ||
      tipoIdentificador > 3
    ) {
      logError(`‚ùå Tipo identificador inv√°lido: '${tipoIdentificadorStr}'`);
      return null;
    }

    const a√±oCorto = parseInt(a√±oStr);
    if (isNaN(a√±oCorto)) {
      logError(`‚ùå A√±o inv√°lido: '${a√±oStr}'`);
      return null;
    }
    const a√±o = 2000 + a√±oCorto;

    if (!identificador || identificador.length === 0) {
      logError(`‚ùå Identificador vac√≠o`);
      return null;
    }

    log(`‚úÖ Datos decodificados:`, {
      sistema,
      institucion,
      nivel,
      grado,
      identificador,
      tipoIdentificador,
      a√±o,
    });

    return {
      sistema,
      institucion,
      nivel: nivel as NivelEducativo,
      grado,
      identificador,
      tipoIdentificador,
      a√±o,
    };
  } catch (error) {
    logError(`‚ùå Error en descompresi√≥n:`, error);
    return null;
  }
}

// üîó Funciones de codificaci√≥n Base62
function codificarBase62(numero: bigint): string {
  const alfabeto =
    "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  if (numero === 0n) return "0";

  let resultado = "";
  let num = numero;
  while (num > 0) {
    resultado = alfabeto[Number(num % 62n)] + resultado;
    num = num / 62n;
  }
  return resultado;
}

function decodificarBase62(texto: string): bigint {
  const alfabeto =
    "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  let resultado = 0n;
  for (let i = 0; i < texto.length; i++) {
    const charIndex = alfabeto.indexOf(texto[i]);
    if (charIndex === -1) throw new Error("Car√°cter inv√°lido en Base62");
    resultado = resultado * 62n + BigInt(charIndex);
  }
  return resultado;
}

function stringANumero(str: string): bigint {
  let resultado = 0n;
  for (let i = 0; i < str.length; i++) {
    resultado = resultado * 256n + BigInt(str.charCodeAt(i));
  }
  return resultado;
}

function numeroAString(num: bigint): string {
  if (num === 0n) return "";
  const bytes: number[] = [];
  let numero = num;
  while (numero > 0) {
    bytes.unshift(Number(numero % 256n));
    numero = numero / 256n;
  }
  return String.fromCharCode(...bytes);
}

// üè∑Ô∏è Funci√≥n para normalizar ID del estudiante
function normalizarIdEstudiante(idEstudiante: string): string {
  return !idEstudiante.includes("-")
    ? `${idEstudiante}-${TiposIdentificadores.DNI}`
    : idEstudiante;
}

// üéØ Funci√≥n principal para generar QR
export function generarCadenaDeDatosDeEstudianteCodificada(
  estudiante: EstudianteConAulaYRelacion
): string {
  if (!estudiante.aula) {
    throw new Error("El estudiante no tiene aula asignada");
  }

  const a√±oActual = new Date().getFullYear();
  const identificadorNormalizado = normalizarIdEstudiante(
    estudiante.Id_Estudiante
  );
  const [identificador, tipoIdentificador] =
    identificadorNormalizado.split("-");

  log("üìù Datos originales:", {
    sistema: NOMBRE_ACTUAL_SISTEMA,
    institucion: NOMBRE_INSTITUCION,
    nivel: estudiante.aula.Nivel,
    grado: estudiante.aula.Grado,
    identificador,
    tipoIdentificador: parseInt(tipoIdentificador),
    a√±o: a√±oActual,
  });

  const datosComprimidos = comprimirDatos(
    NOMBRE_ACTUAL_SISTEMA,
    NOMBRE_INSTITUCION,
    estudiante.aula.Nivel,
    estudiante.aula.Grado,
    identificador,
    parseInt(tipoIdentificador),
    a√±oActual
  );
  log("üóúÔ∏è Datos comprimidos:", datosComprimidos);

  const hashVerificacion = crearHashCompacto(datosComprimidos);
  log("üîê Hash de verificaci√≥n:", hashVerificacion);

  const datosCombinados = datosComprimidos + hashVerificacion;
  log("üîó Datos combinados:", datosCombinados);

  const numero = stringANumero(datosCombinados);
  const resultado = codificarBase62(numero);

  log("‚úÖ Resultado final:", resultado, `(${resultado.length} caracteres)`);

  if (resultado.length > 20) {
    logWarn("‚ö†Ô∏è El QR result√≥ m√°s largo de 20 caracteres.");
  }

  return resultado;
}

// üîç Interfaz para resultado de decodificaci√≥n
interface ResultadoDecodificacion {
  exito: boolean;
  identificadorEstudiante?: string;
  datosDecodificados?: {
    sistema: string;
    institucion: string;
    nivel: NivelEducativo;
    grado: number;
    identificador: string;
    tipoIdentificador: number;
    a√±o: number;
  };
  error?: string;
}

// üîç Funci√≥n para decodificar QR - VERSI√ìN MEJORADA SIN THROWS
export function decodificarCadenaQREstudiante(
  cadenaQR: string
): ResultadoDecodificacion {
  try {
    log("üîç Iniciando decodificaci√≥n de:", cadenaQR);

    // Validaci√≥n b√°sica de entrada
    if (!cadenaQR || cadenaQR.trim().length === 0) {
      logError("üí• Error: Cadena QR vac√≠a");
      return {
        exito: false,
        error: "C√≥digo QR no v√°lido",
      };
    }

    let numero: bigint;
    try {
      numero = decodificarBase62(cadenaQR);
      log("üî¢ N√∫mero decodificado:", numero.toString());
    } catch (error) {
      logError("üí• Error en decodificaci√≥n Base62:", error);
      return {
        exito: false,
        error: "C√≥digo QR no v√°lido",
      };
    }

    let datosCombinados: string;
    try {
      datosCombinados = numeroAString(numero);
      log("üîó Datos combinados recuperados:", datosCombinados);
    } catch (error) {
      logError("üí• Error al convertir n√∫mero a string:", error);
      return {
        exito: false,
        error: "C√≥digo QR no v√°lido",
      };
    }

    if (datosCombinados.length < 9) {
      logError(
        "üí• Error: QR demasiado corto, longitud:",
        datosCombinados.length
      );
      return {
        exito: false,
        error: "C√≥digo QR no v√°lido",
      };
    }

    const hashRecibido = datosCombinados.slice(-8);
    const datosComprimidos = datosCombinados.slice(0, -8);

    log("üîê Hash recibido:", hashRecibido);
    log("üóúÔ∏è Datos comprimidos recuperados:", datosComprimidos);

    if (!verificarHash(datosComprimidos, hashRecibido)) {
      logError("üí• Error: Hash inv√°lido - verificaci√≥n de integridad fallida");
      return {
        exito: false,
        error: "C√≥digo QR no v√°lido",
      };
    }

    log("‚úÖ Hash verificado correctamente");

    const datosDescomprimidos = descomprimirDatos(datosComprimidos);
    if (!datosDescomprimidos) {
      logError("üí• Error: No se pudieron descomprimir los datos");
      return {
        exito: false,
        error: "C√≥digo QR no v√°lido",
      };
    }

    log("üìä Datos descomprimidos:", datosDescomprimidos);

    // Validaciones con mensajes espec√≠ficos y amigables
    const a√±oActual = new Date().getFullYear();

    if (
      VALIDAR_NOMBRE_SISTEMA &&
      datosDescomprimidos.sistema !== NOMBRE_ACTUAL_SISTEMA
    ) {
      logError(
        `üí• Error: Sistema incorrecto. Esperado: ${NOMBRE_ACTUAL_SISTEMA}, Recibido: ${datosDescomprimidos.sistema}`
      );
      return {
        exito: false,
        error:
          "Genera nuevamente el QR puesto que el nombre del sistema cambi√≥",
      };
    }

    if (
      VALIDAR_INSTITUCION &&
      datosDescomprimidos.institucion !== NOMBRE_INSTITUCION
    ) {
      logError(
        `üí• Error: Instituci√≥n incorrecta. Esperado: ${NOMBRE_INSTITUCION}, Recibido: ${datosDescomprimidos.institucion}`
      );
      return {
        exito: false,
        error: "Este c√≥digo QR no pertenece a esta instituci√≥n",
      };
    }

    if (VALIDAR_A√ëO && datosDescomprimidos.a√±o !== a√±oActual) {
      logError(
        `üí• Error: A√±o incorrecto. Esperado: ${a√±oActual}, Recibido: ${datosDescomprimidos.a√±o}`
      );
      return {
        exito: false,
        error: `Este c√≥digo QR pertenece al a√±o ${datosDescomprimidos.a√±o}, debe ser del a√±o actual ${a√±oActual}`,
      };
    }

    if (
      VALIDAR_TIPO_IDENTIFICADOR &&
      !Object.values(TiposIdentificadores).includes(
        datosDescomprimidos.tipoIdentificador
      )
    ) {
      logError(
        `üí• Error: Tipo de identificador inv√°lido: ${datosDescomprimidos.tipoIdentificador}`
      );
      return {
        exito: false,
        error: "C√≥digo QR no v√°lido",
      };
    }

    if (
      datosDescomprimidos.nivel !== "P" &&
      datosDescomprimidos.nivel !== "S"
    ) {
      logError(
        `üí• Error: Nivel educativo inv√°lido: ${datosDescomprimidos.nivel}`
      );
      return {
        exito: false,
        error: "C√≥digo QR no v√°lido",
      };
    }

    const identificadorEstudiante = `${datosDescomprimidos.identificador}-${datosDescomprimidos.tipoIdentificador}`;

    log("‚úÖ Decodificaci√≥n exitosa:", identificadorEstudiante);
    return {
      exito: true,
      identificadorEstudiante,
      datosDecodificados: datosDescomprimidos,
      error: undefined, // Expl√≠citamente undefined para √©xito
    };
  } catch (error) {
    logError("üí• Error inesperado durante decodificaci√≥n:", error);
    return {
      exito: false,
      error: "C√≥digo QR no v√°lido",
    };
  }
}
